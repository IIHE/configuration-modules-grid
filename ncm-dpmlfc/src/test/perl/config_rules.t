# -*- mode: cperl -*-
# ${license-info}
# ${author-info}
# ${build-info}

use strict;
use warnings;
use Test::More tests => 10;
use Test::NoWarnings;
use Test::Quattor;
use NCM::Component::dpmlfc;
use Readonly;
use CAF::Object;
Test::NoWarnings::clear_warnings();


=pod

=head1 SYNOPSIS

Basic test for dpmlfc configuration (variable substitution)

=cut

Readonly my $DPM_CONF_FILE => "/etc/sysconfig/dpm";
Readonly my $DMLITE_CONF_FILE => "/etc/httpd/conf.d/zlcgdm-dav.conf";

Readonly my $DPM_INITIAL_CONF_1 => '# should the dpm daemon run?
# any string but "yes" will equivalent to "NO"
#
RUN_DPMDAEMON="no"
#
# should we run with another limit on the number of file descriptors than the default?
# any string will be passed to ulimit -n
#ULIMIT_N=4096
#
###############################################################################################
# Change and uncomment the variables below if your setup is different than the one by default #
###############################################################################################

#ALLOW_COREDUMP="no"

#################
# DPM variables #
#################

# - DPM Name Server host : please change !!!!!!
#DPNS_HOST=grid05.lal.in2p3.fr

# - make sure we use globus pthread model
#export GLOBUS_THREAD_MODEL=pthread
';

Readonly my $DPM_INITIAL_CONF_2 => $DPM_INITIAL_CONF_1 . '
# Duplicated line
ALLOW_COREDUMP="no"
#
# Very similar line
ALLOW_COREDUMP2="no"
';

Readonly my $DPM_INITIAL_CONF_3 => $DPM_INITIAL_CONF_1 . '
#DISKFLAGS="a list of flag"
';

Readonly my $DMLITE_INITIAL_CONF_1 => '#
# This is the Apache configuration for the dmlite DAV.
#
# The first part of the file configures all the required options common to all
# VirtualHosts. The actual VirtualHost instances are defined at the end of this file.
#

# Static content
Alias /static/ /usr/share/lcgdm-dav/
<Location "/static">
  <IfModule expires_module>
    ExpiresActive On
    ExpiresDefault "access plus 1 month"
  </IfModule>
</Location>

# Alias for the delegation
ScriptAlias /gridsite-delegation "/usr/libexec/gridsite/cgi-bin/gridsite-delegation.cgi"

# Base path for nameserver requests
<LocationMatch "^/dpm/lal\.in2p3\.fr/.*">

  # None, one or several flags
  # Write      Enable write access
  # NoAuthn    Disables user authentication
  # RemoteCopy Enables third party copies
  NSFlags Write

  # On redirect, maximum number of replicas in the URL
  # (Used only by LFC)
  NSMaxReplicas 3

  # Redirection ports
  # Two parameters: unsecure (plain HTTP) and secure (HTTPS)
  # NSRedirectPort 80 443

  # List of trusted DN (as X509 Subject).
  # This DN can act on behalf of other users using the HTTP headers:
  # X-Auth-Dn
  # X-Auth-FqanN (Can be specified multiple times, with N starting on 0, and incrementing)
  # NSTrustedDNS "/DC=ch/DC=cern/OU=computers/CN=trusted-host.cern.ch"

  # If mod_gridsite does not give us information about the certificate, this
  # enables mod_ssl to pass environment variables that can be used by mod_lcgdm_ns
  # to get the user DN.
  SSLOptions +StdEnvVars

</LocationMatch>
';


Readonly my $DPM_EXPECTED_CONF_1 => '# This file is managed by Quattor - DO NOT EDIT lines generated by Quattor
#
# should the dpm daemon run?
# any string but "yes" will equivalent to "NO"
#
RUN_DPMDAEMON="no"
#
# should we run with another limit on the number of file descriptors than the default?
# any string will be passed to ulimit -n
#ULIMIT_N=4096
#
###############################################################################################
# Change and uncomment the variables below if your setup is different than the one by default #
###############################################################################################

ALLOW_COREDUMP="yes"		# Line generated by Quattor

#################
# DPM variables #
#################

# - DPM Name Server host : please change !!!!!!
#DPNS_HOST=grid05.lal.in2p3.fr

# - make sure we use globus pthread model
export GLOBUS_THREAD_MODEL=pthread		# Line generated by Quattor
';

Readonly my $DPM_EXPECTED_CONF_2 => $DPM_EXPECTED_CONF_1 . '
# Duplicated line
ALLOW_COREDUMP="yes"		# Line generated by Quattor
#
# Very similar line
ALLOW_COREDUMP2="no"
';

Readonly my $DPM_EXPECTED_CONF_3 => $DPM_EXPECTED_CONF_1 . '
DISKFLAGS="Write RemoteCopy"		# Line generated by Quattor
';

Readonly my $DMLITE_EXPECTED_CONF_1 => '# This file is managed by Quattor - DO NOT EDIT lines generated by Quattor
#
#
# This is the Apache configuration for the dmlite DAV.
#
# The first part of the file configures all the required options common to all
# VirtualHosts. The actual VirtualHost instances are defined at the end of this file.
#

# Static content
Alias /static/ /usr/share/lcgdm-dav/
<Location "/static">
  <IfModule expires_module>
    ExpiresActive On
    ExpiresDefault "access plus 1 month"
  </IfModule>
</Location>

# Alias for the delegation
ScriptAlias /gridsite-delegation "/usr/libexec/gridsite/cgi-bin/gridsite-delegation.cgi"

# Base path for nameserver requests
<LocationMatch "^/dpm/lal\.in2p3\.fr/.*">

  # None, one or several flags
  # Write      Enable write access
  # NoAuthn    Disables user authentication
  # RemoteCopy Enables third party copies
NSFlags Write RemoteCopy

  # On redirect, maximum number of replicas in the URL
  # (Used only by LFC)
  NSMaxReplicas 3

  # Redirection ports
  # Two parameters: unsecure (plain HTTP) and secure (HTTPS)
  # NSRedirectPort 80 443

  # List of trusted DN (as X509 Subject).
  # This DN can act on behalf of other users using the HTTP headers:
  # X-Auth-Dn
  # X-Auth-FqanN (Can be specified multiple times, with N starting on 0, and incrementing)
  # NSTrustedDNS "/DC=ch/DC=cern/OU=computers/CN=trusted-host.cern.ch"

  # If mod_gridsite does not give us information about the certificate, this
  # enables mod_ssl to pass environment variables that can be used by mod_lcgdm_ns
  # to get the user DN.
  SSLOptions +StdEnvVars

</LocationMatch>
';


# Copied from dpmlfc.pm
use constant LINE_FORMAT_PARAM => 1;
use constant LINE_FORMAT_ENVVAR => 2;
use constant LINE_FORMAT_XRDCFG => 3;
use constant LINE_FORMAT_XRDCFG_SETENV => 4;
use constant LINE_FORMAT_XRDCFG_SET => 5;
use constant LINE_VALUE_AS_IS => 0;
use constant LINE_VALUE_BOOLEAN => 1;
use constant LINE_VALUE_HOST_LIST => 2;
use constant LINE_VALUE_INSTANCE_PARAMS => 3;
use constant LINE_VALUE_ARRAY => 4;
use constant LINE_VALUE_HASH_KEYS => 5;
use constant LINE_VALUE_STRING_HASH => 6;
use constant LINE_VALUE_OPT_NONE => 0;
use constant LINE_VALUE_OPT_SINGLE => 1;
use constant LINE_FORMAT_DEFAULT => LINE_FORMAT_PARAM;
use constant LINE_QUATTOR_COMMENT => "\t\t# Line generated by Quattor";

my %dpm_config_rules_1 = (
      "ALLOW_COREDUMP" => "allowCoreDump:dpm;".LINE_FORMAT_PARAM.";".LINE_VALUE_BOOLEAN,
      "GLOBUS_THREAD_MODEL" => "globusThreadModel:dpm;".LINE_FORMAT_ENVVAR,
     );

my %dpm_config_rules_2 = (
      "ALLOW_COREDUMP" => "allowCoreDump:dpm;".LINE_FORMAT_PARAM.";".LINE_VALUE_BOOLEAN,
      "GLOBUS_THREAD_MODEL" => "globusThreadModel:dpm;".LINE_FORMAT_ENVVAR,
      "DISKFLAGS" =>"DiskFlags:dpm;".LINE_FORMAT_PARAM.";".LINE_VALUE_ARRAY,
     );

my %dav_config_rules = (
        "NSFlags" =>"NSFlags:dav;".LINE_FORMAT_XRDCFG.";".LINE_VALUE_ARRAY,
);

$CAF::Object::NoAction = 1;

my $comp = NCM::Component::dpmlfc->new('dpmlfc');

my $dpm_options = {"dpm" => {"allowCoreDump" => 1,
                             "globusThreadModel" => "pthread",
                             "fastThreads" => 200,
                             "DiskFlags" => [ "Write", "RemoteCopy" ],
                            }};

set_file_contents($DPM_CONF_FILE,$DPM_INITIAL_CONF_1);
# Test  simple variable substitution
set_file_contents($DPM_CONF_FILE,$DPM_INITIAL_CONF_1);
my $changes = $comp->updateConfigFile($DPM_CONF_FILE,
                                      \%dpm_config_rules_1,
                                      $dpm_options);
my $fh = get_file($DPM_CONF_FILE);
ok(defined($fh), $DPM_CONF_FILE." was opened");
is("$fh", $DPM_EXPECTED_CONF_1, $DPM_CONF_FILE." has expected contents (config 1)");
$fh->close();

# Test potentially ambiguous config (duplicated lines, similar keywords)
set_file_contents($DPM_CONF_FILE,$DPM_INITIAL_CONF_2);
$changes = $comp->updateConfigFile($DPM_CONF_FILE,
                                   \%dpm_config_rules_1,
                                   $dpm_options);
$fh = get_file($DPM_CONF_FILE);
ok(defined($fh), $DPM_CONF_FILE." was opened");
is("$fh", $DPM_EXPECTED_CONF_2, $DPM_CONF_FILE." has expected contents (config 2)");
$fh->close();

# Test array displayed as list
set_file_contents($DPM_CONF_FILE,$DPM_INITIAL_CONF_3);
$changes = $comp->updateConfigFile($DPM_CONF_FILE,
                                   \%dpm_config_rules_2,
                                   $dpm_options);
$fh = get_file($DPM_CONF_FILE);
ok(defined($fh), $DPM_CONF_FILE." was opened");
is("$fh", $DPM_EXPECTED_CONF_3, $DPM_CONF_FILE." has expected contents (config 3)");
$fh->close();

# Test 'keyword value" format (a la Apache)
my $dmlite_options = {"dav" => {"NSFlags" => [ "Write", "RemoteCopy" ],
                                    }};
set_file_contents($DMLITE_CONF_FILE,$DMLITE_INITIAL_CONF_1);
$changes = $comp->updateConfigFile($DMLITE_CONF_FILE,
                                   \%dav_config_rules,
                                   $dmlite_options);
$fh = get_file($DMLITE_CONF_FILE);
ok(defined($fh), $DMLITE_CONF_FILE." was opened");
is("$fh", $DMLITE_EXPECTED_CONF_1, $DMLITE_CONF_FILE." has expected contents");
$fh->close();


Test::NoWarnings::had_no_warnings();

