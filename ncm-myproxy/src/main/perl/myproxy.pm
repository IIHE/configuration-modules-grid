# ${license-info}
# ${developer-info}
# ${author-info}
# ${build-info}
#

package NCM::Component::myproxy;

use strict;
use NCM::Component;
use vars qw(@ISA $EC);
@ISA = qw(NCM::Component);
$EC=LC::Exception::Context->new->will_store_all;
use NCM::Check;

use EDG::WP4::CCM::Element;

use File::Copy;
use File::Path;

local(*DTA);


##########################################################################
sub Configure($$@) {
##########################################################################
    
    my ($self, $config) = @_;

    # Define paths for convenience. 
    my $base = "/software/components/myproxy";
    my $edgpath = "/system/edg/config/EDG_LOCATION";

    # Save the date.
    my $date = localtime();

    # Default location for EDG software.
    my $edgloc = "/opt/edg";
    if ($config->elementExists($edgpath)) {
        $edgloc = $config->getValue($edgpath);
    }

    # Add /etc and ensure that the directory exists.
    my $confdir = "$edgloc/etc";
    mkpath($confdir, 0, 0755);
    $self->Fail("EDG_LOCATION does not exist") unless (-d $confdir);

    # Header of the file.
    my $contents = "#\n# File generated by ncm-myproxy on $date\n#\n";

    # Loop over all of the trusted DNs.
    if ($config->elementExists("$base/trustedDNs")) {
	my @subjectlist = $config->getElement("$base/trustedDNs")->getList();

	foreach my $element (@subjectlist) {
	    my $subject = $element->getValue();
	    $contents .= "$subject\n";
	}
    }

    # And now the full path name.
    my $fname = "$confdir/edg-myproxy.conf";

    # Only stop the daemon if it is already running.  This depends
    # on the status directive returning a reasonable value (i.e.
    # 0 if running).
    if (! system('/etc/rc.d/init.d/myproxy status')) {
	if (system('/etc/rc.d/init.d/myproxy stop')) {
	    $self->warn("init.d myproxy stop failed: ". $?);
	}
    }
    
    # Now just create the new configuration file.  Be careful to save
    # a backup of the previous file if necessary. 
    if ( ! -e $fname ) {
        
        # Configuration file doesn't exist yet.  Create it. 
        open CONF, ">$fname";
        print CONF $contents;
        close (CONF);
        $self->log("$fname created");
        
    } else {
        
        # Already exists. Make backup and create new file. 
        my $result = LC::Check::file( $fname,
                                      backup => ".old",
                                      contents => $contents,
                                      );
        $self->log("$fname updated") if $result;
    }

    # Restart the server.
    if (system('/etc/rc.d/init.d/myproxy start')) {
	$self->error('init.d myproxy start failed: '. $?);
    }
    
    return 1;
}

1;      # Required for PERL modules
