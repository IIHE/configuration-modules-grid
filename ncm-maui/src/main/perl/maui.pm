# ${license-info}
# ${developer-info}
# ${author-info}
# ${build-info}
#

package NCM::Component::maui;

use strict;
use NCM::Component;
use vars qw(@ISA $EC);
@ISA = qw(NCM::Component);
$EC=LC::Exception::Context->new->will_store_all;
use NCM::Check;

use EDG::WP4::CCM::Element;

use File::Copy;
use File::Path;
use Encode qw(encode_utf8);


##########################################################################
sub Configure($$@) {
##########################################################################
    
    my ($self, $config) = @_;

    # Define paths for convenience. 
    my $base = "/software/components/maui";

    # Save the date.
    my $date = localtime();

    # Default location for EDG software.
    my $mauipath = "/var/spool/maui";
    if ($config->elementExists("$base/configPath")) {
        $mauipath = $config->getValue("$base/configPath");
    }

    # Default location for EDG software.
    my $mauifile = "maui.cfg";
    if ($config->elementExists("$base/configFile")) {
        $mauifile = $config->getValue("$base/configFile");
    }

    # Add /etc and ensure that the directory exists.
    my $fname = "$mauipath/$mauifile";
    mkpath($mauipath, 0, 0755) unless (-e $mauipath);
    if (! -d $mauipath) {
	$self->Fail("Can't create directory: $mauipath");
	return 1;
    }

    # Retrieve the contents of the file. 
    my $contents = '';
    if ($config->elementExists("$base/contents")) {
	$contents .= "#\n# File generated by ncm-maui on $date\n#\n";
        $contents .= $config->getValue("$base/contents");
    } else {
	$self->Fail("configuration not specified");
	return 1;
    }

    # Now just create the new configuration file.  Be careful to save
    # a backup of the previous file if necessary. 
    if ( ! -e $fname ) {
        
        # Configuration file doesn't exist yet.  Create it. 
        open CONF, ">$fname";
        print CONF $contents;
        close (CONF);
        $self->log("$fname created");
        
    } else {
        
        # Already exists. Make backup and create new file. 
        my $result = LC::Check::file( $fname,
                                      backup => ".old",
                                      contents => encode_utf8($contents),
                                      );
        $self->log("$fname updated") if $result;
    }

    if ( -f '/etc/init.d/maui' and -x '/etc/init.d/maui' ) {
        # Restart the daemon.  The restart method doesn't work so manually
        # do a stop and start.
        if (! system('/etc/init.d/maui status')) {
	    if (system('/etc/init.d/maui stop')) {
	        $self->warn("maui init.d stop failed: ". $?);
	    }
        }

        # Sleep a bit to allow processes to stop.  (Need to kill processes
        # as well?) 
        sleep 5;
    
        # Restart the server.
        if (system('/etc/init.d/maui start')) {
	    $self->error('maui init.d start failed: '. $?);
        }
    }
    else {
        $self->info('/etc/init.d/maui does not exist, assuming configuration of maui client');
    }
    
    return 1;
}

1;      # Required for PERL modules
