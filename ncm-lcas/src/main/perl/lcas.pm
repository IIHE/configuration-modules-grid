# ${license-info}
# ${developer-info}
# ${author-info}
# ${build-info}
#
# Coding style: emulate <TAB> characters with 4 spaces, thanks!
################################################################################


package NCM::Component::lcas;

use strict;
use NCM::Component;
use vars qw(@ISA $EC);
@ISA = qw(NCM::Component);
$EC=LC::Exception::Context->new->will_store_all;
use NCM::Check;

use File::Path;

use EDG::WP4::CCM::Element;


local(*DTA);

##########################################################################
sub Configure($$@) {
##########################################################################
    
    my ($self, $config) = @_;

    # Define paths for convenience. 
    my $base = "/software/components/lcas";

    # we will be cautious and only write the set of configuration
    # files if we are entirely successful in generating all of them
    # meanwhile, $cpath{$path} will retain the content
    my %cfiles=();

    my $dbpath = "/opt/edg/etc/lcas/lcas.db";
    if ( $config->elementExists("$base/dbpath")) {
        $dbpath = $config->getValue("$base/dbpath");
    }

    $cfiles{$dbpath}="";
    $cfiles{$dbpath}.="# LCAS database/plugin list\n";
    $cfiles{$dbpath}.="# Auto-generated by NCM::lcas as $dbpath\n";
    $cfiles{$dbpath}.="# DO NOT EDIT BY HAND -- edit the CDB profile instead\n";
    $cfiles{$dbpath}.="#\n";

    if ( $config->elementExists("$base/module") ) {

        my $modelmt=$config->getElement("$base/module");


        while ( $modelmt->hasNextElement() ) {
            my $element = $modelmt->getNextElement();
            my $modname = $element->getName();

            $self->debug(1,"LCAS: configuring module $modname");

            my $modpath = $config->getValue("$base/module/$modname/path");
            $cfiles{$dbpath}.="pluginname=$modpath";

            if ( $config->elementExists("$base/module/$modname/args") ) {
                $cfiles{$dbpath}.=",pluginargs=".
                    $config->getValue("$base/module/$modname/args");
            }
            $cfiles{$dbpath}.="\n";

            # optionally write the module conf as well in a sep. file
            if ( $config->elementExists("$base/module/$modname/conf/path") ) {
                my $cfname=$config->getValue("$base/module/$modname/conf/path");
                $cfiles{$cfname}="";

                # may I write a header here?
                my $noheader="false";
                $config->elementExists("$base/module/$modname/conf/noheader") and 
                  $noheader=$config->getValue("$base/module/$modname/conf/noheader");

                if ( $noheader ne "true" ) {
                 $cfiles{$cfname}.="# LCAS module configuration for $modname\n";
                 $cfiles{$cfname}.="# Auto-generated by NCM::lcas\n";
                 $cfiles{$cfname}.="# written to $cfname\n";
                 $cfiles{$cfname}.="# for module in path $modpath\n";
                 $cfiles{$cfname}.="#\n";
                }

                if ( $config->elementExists("$base/module/$modname/conf/content") ) {
                    my $celmt=$config->getElement("$base/module/$modname/conf/content");
                    while ( $celmt->hasNextElement() ) {
                      my $lelmt=$celmt->getNextElement();
                      my $lelmtname=$lelmt->getName();
                      $cfiles{$cfname}.=$config->getValue("$base/module/$modname/conf/content/$lelmtname")."\n";
                    }
                }

            }
        }

    }

    foreach my $file ( keys %cfiles ) {

        if ( ! -e $file ) {

                (my $dirname=$file)=~s/\/[^\/]+$//;
                if ( ! -d $dirname ) {
                     &mkdirp($dirname,0755);
                }

                open ( DTA, ">".$file  );
                print DTA $cfiles{$file};
                close ( DTA );
                chmod 0640,$file;
                $self->log("LCAS configuration file $file created (0640)\n");

        } else {

                my $result = LC::Check::file( $file,
                                backup => ".old",
                                contents => $cfiles{$file}
                        );

                if ( $result ) {
                        $self->log("LCAS configuration file $file updated\n");
                }

        }

    }

    return 1;
}

1;      # Required for PERL modules


sub mkdirp {
  my ( $path , $mode ) = @_;

  -d "$path" and return 0;

  mkdir $path,$mode;

  if ( $! ) {
    (my $dirname=$path)=~s/(.*)\/[^\/]+$/$1/;
    $dirname and ( ! -d $dirname ) and my $rc= &mkdirp($dirname,$mode);
    $rc or return -1;
    mkdir $path,$mode;
    $! and return -1;
  }
}
